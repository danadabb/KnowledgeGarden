{"pageProps":{"note":{"id":"yskq69lbyw4kpr8y5sdx9lu","title":"API Architecture","desc":"","updated":1646263119676,"created":1646047028554,"custom":{},"fname":"web.backend.api-architecture","type":"note","vault":{"fsPath":"vault"},"contentHash":"79134708dbc87d53f16ec5575cf756fd","links":[],"anchors":{"rpc-rest-and-graphql":{"type":"header","text":"RPC, REST and GRAPHQL","value":"rpc-rest-and-graphql","line":8,"column":0,"depth":3},"rpc---remote-procedure-call":{"type":"header","text":"RPC - Remote Procedure Call","value":"rpc---remote-procedure-call","line":10,"column":0,"depth":2},"disadvantages":{"type":"header","text":"Disadvantages","value":"disadvantages","line":82,"column":0,"depth":3},"advantages":{"type":"header","text":"Advantages","value":"advantages","line":88,"column":0,"depth":3},"grpc":{"type":"header","text":"gRPC","value":"grpc","line":92,"column":0,"depth":3},"references":{"type":"header","text":"References","value":"references","line":127,"column":0,"depth":4}},"children":[],"parent":"1y1y9h9mi8y9k3i44znhfg3","data":{}},"body":"<h1 id=\"api-architecture\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#api-architecture\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>API Architecture</h1>\n<h3 id=\"rpc-rest-and-graphql\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#rpc-rest-and-graphql\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>RPC, REST and GRAPHQL</h3>\n<h2 id=\"rpc---remote-procedure-call\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#rpc---remote-procedure-call\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>RPC - Remote Procedure Call</h2>\n<p>Earliest API architecture. RPC is to call a remote \"procedure\" or a function e.g. from a client application to a server with the running API. For example</p>\n<pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// this procedure is invoked and the response is returned</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">!</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>How the procedure is invoked on the server depends on the framework and choice of technology adopted. RPC is just a concept, and in a simple scenario, the method could be determined by simply parsing the url coming from the client.</p>\n<p>A contrived example:</p>\n<pre class=\"language-javascript\"><code class=\"language-Javascript\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> port <span class=\"token operator\">=</span> <span class=\"token number\">3000</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// extract the method being called from the query params</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> method <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">a</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>req<span class=\"token punctuation\">.</span><span class=\"token property-access\">query</span><span class=\"token punctuation\">.</span><span class=\"token property-access\">b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">let</span> methodResponse <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// call the method requested</span>\n  <span class=\"token keyword control-flow\">switch</span><span class=\"token punctuation\">(</span>method<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n     <span class=\"token keyword\">case</span> <span class=\"token string\">\"add\"</span><span class=\"token operator\">:</span>\n     \tmethodResponse <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">break</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">case</span> <span class=\"token string\">\"multiply\"</span><span class=\"token operator\">:</span>\n     \tmethodResponse <span class=\"token operator\">=</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword control-flow\">break</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword\">case</span> <span class=\"token string\">\"minus\"</span><span class=\"token operator\">:</span>\n     \tmethodResponse <span class=\"token operator\">=</span> <span class=\"token function\">minus</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword control-flow\">break</span><span class=\"token punctuation\">;</span>\n     <span class=\"token keyword module\">default</span><span class=\"token operator\">:</span>\n        methodResponse <span class=\"token operator\">=</span> <span class=\"token string\">\"method doesn't exist\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span>\n\n  res<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">result</span><span class=\"token operator\">:</span> methodResponse <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">minus</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword control-flow\">return</span> a <span class=\"token operator\">-</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\napp<span class=\"token punctuation\">.</span><span class=\"token method function property-access\">listen</span><span class=\"token punctuation\">(</span>port<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token arrow operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token console class-name\">console</span><span class=\"token punctuation\">.</span><span class=\"token method function property-access\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Example app listening on port </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>port<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n</code></pre>\n<p>Calls to the above as follows:</p>\n<pre class=\"language-bash\"><code class=\"language-bash\">POST http://localhost:3000/?method<span class=\"token operator\">=</span>multiply<span class=\"token operator\">&#x26;</span><span class=\"token assign-left variable\">a</span><span class=\"token operator\">=</span><span class=\"token number\">400</span><span class=\"token operator\">&#x26;</span><span class=\"token assign-left variable\">b</span><span class=\"token operator\">=</span><span class=\"token number\">2</span>\n<span class=\"token punctuation\">{</span>output: <span class=\"token number\">8</span><span class=\"token punctuation\">}</span>\n\n</code></pre>\n<h3 id=\"disadvantages\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#disadvantages\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Disadvantages</h3>\n<p><strong>Tight coupling</strong> - RPCs client and server are tightly coupled since function calls need to match.</p>\n<p><strong>Security issues</strong> - It may be considered a flaw that the inner workings of the API are somewhat revealed to the client as the method name may imply.</p>\n<h3 id=\"advantages\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#advantages\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>Advantages</h3>\n<p><strong> Lightweight </strong> RPC APIs are expected not to return a lot of meta data and the most popular frameworks such as gRPC are built in such a way that allows them to be more performant than their REST counterpart.</p>\n<h3 id=\"grpc\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#grpc\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>gRPC</h3>\n<p>One of the most notable examples of RPC frameworks in modern day is <a href=\"https://grpc.io/\">gRPC</a>. gRPC is an open-source Google framework used for high performance microservice architecture styles. It's supported by multiple languages/frameworks such as Go, Node, Rust Python and more. It's used by many well known tech companies such as Square, Netlfix and <a href=\"https://blog.cloudflare.com/road-to-grpc/\">Cloudflare</a>.</p>\n<p>gRPC is considered highly performant due to:</p>\n<ul>\n<li>Using HTTP/2 for transport</li>\n<li>Allowing both clients and servers to stream data as opposed to polling (<em>Note: I believe this is available due to HTTP/2</em>)</li>\n<li>Encouraging Protobuf as the messaging format</li>\n</ul>\n<p>Protobuf (protocol buffers) are a message format that allow for serialization of structured data in a language neutral way. They are an alternative messaging format to others such as JSON or XML and are considered more compact to achieve low latency.</p>\n<p>Example of a Protobuf message:</p>\n<pre class=\"language-protobuf\"><code class=\"language-Protobuf\"><span class=\"token comment\">// Person.proto</span>\n<span class=\"token keyword\">message</span> <span class=\"token class-name\">Person</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">required</span> <span class=\"token builtin\">string</span> name <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">required</span> <span class=\"token builtin\">int32</span> age <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">optional</span> <span class=\"token builtin\">string</span> email <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>gRPC can be implemented using a variety of languages or frameworks, however it seems performance varies - multiple language performance tests are <a href=\"https://grpc.io/docs/guides/benchmarking/\">performed often</a> on the code base. Note that the <a href=\"https://grafana-dot-grpc-testing.appspot.com/?kiosk=tv\">performance dashboard</a> is missing Node however, it has been <a href=\"https://www.nexthink.com/blog/comparing-grpc-performance/\">benchmarked by 3rd parties</a> and <em>appears</em> to be less performant than alternatives such as Go.</p>\n<p>gRPC currently cannot natively communicate with the web via HTML/2. Browsers do not support protobuf payloads and hence, grpc-web was introduced in order to act as a proxy to serialize web payload and give developers the ability to use protobufs across the full stack:</p>\n<p><img src=\"/KnowledgeGarden/assets/images/2022-03-03-10-13-17.png\" alt=\"https://grpc.io/blog/state-of-grpc-web/\"></p>\nSource: https://grpc.io/blog/state-of-grpc-web/\n<br>\n<br>\nPrior to this, developers were forced to use a REST API with HTTP to communicate with the gRPC backend.\n<h4 id=\"references\"><a aria-hidden=\"true\" class=\"anchor-heading\" href=\"#references\"><svg aria-hidden=\"true\" viewBox=\"0 0 16 16\"><use xlink:href=\"#svg-link\"></use></svg></a>References</h4>\n<ol>\n<li><a href=\"https://blog.jscrambler.com/rpc-style-vs-rest-web-apis\">https://blog.jscrambler.com/rpc-style-vs-rest-web-apis</a></li>\n<li><a href=\"https://grpc.io/\">https://grpc.io/</a></li>\n</ol>","noteIndex":{"id":"wn8PE1RhG0znK1alrGFYv","title":"Knowledge Garden","desc":"","updated":1645656788117,"created":1631901573363,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"b4950fc2f0502a4b50a5036aaaeab1cf","links":[],"anchors":{"my-second-brain":{"type":"header","text":"My Second Brain","value":"my-second-brain","line":8,"column":0,"depth":4}},"children":["bwlvrHRccHBUBhHu7Mh1G","XZTCg1c8mZeR9jEyM2HOy","6FtP5bCaxDDd47jEuSH5y","8HZ1TTh4HUtNFePL29cg7"],"parent":null,"data":{},"body":"\n#### My Second Brain\n\n---\n\nA collection of my notes around all things software development.\n\n> This website is generated by a Dendron template. For more information, see the [template README file](https://github.com/dendronhq/template.publish.github/).\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{}},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"enableUserTags":true,"enableHashTags":true,"dendronVersion":"0.83.0","enableEditorDecorations":true},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/KnowledgeGarden","copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://ddab568.github.io/","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"writeStubs":false,"seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enablePrettyLinks":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}