{"keys":[{"path":["title"],"id":"title","weight":1,"src":"title"},{"path":["body"],"id":"body","weight":1,"src":"body"}],"records":[{"i":0,"$":{"0":{"v":"This page has not yet sprouted","n":0.408},"1":{"v":"[Dendron](https://dendron.so/) (the tool used to generate this site) lets authors selective publish content. You will see this page whenever you click on a link to an unpublished page\n\n![](https://foundation-prod-assetspublic53c57cce-8cpvgjldwysl.s3-us-west-2.amazonaws.com/assets/images/not-sprouted.png)","n":0.189}}},{"i":1,"$":{"0":{"v":"Knowledge Garden","n":0.707},"1":{"v":"\n#### My Second Brain\n\n---\n\nA collection of my notes around all things software development.\n\n> This website is generated by a Dendron template. For more information, see the [template README file](https://github.com/dendronhq/template.publish.github/). Feel free to modify and delete this section.\n","n":0.164}}},{"i":2,"$":{"0":{"v":"Web","n":1}}},{"i":3,"$":{"0":{"v":"Frontend","n":1}}},{"i":4,"$":{"0":{"v":"Web Components","n":0.707},"1":{"v":"\nWeb components allow you to create custom reusable and encapuslated HTML tags to be used in web pages and apps. They are capable of isolating CSS and JavaScript similar to `<iframe>` - known as a **shadown DOM**. These are framework agnostic and are supported by most modern browsers.\n\nExample:\n\n```JavaScript\n// CREATE\nclass MyButton extends HTMLElement {...}\nwindow.customElements.define('my-button', MyButton);\n\n// USE\n<my-button></my-button>\n```\n\n### Web Components vs React\n\nAccording to [React documentation](https://reactjs.org/docs/web-components.html#:~:text=React%20and%20Web%20Components%20are,The%20two%20goals%20are%20complementary.), Web Components and React solve different problems. React is a declarative JS library to address state management and web app \"reactivity\". Web components exist to address reusability and encapsulation of HTML elements. React components can only be used in React, where as web components can be used anywhere e.g. across different libraries - Vue, React, Angular etc.\n","n":0.092}}},{"i":5,"$":{"0":{"v":"Design Patterns","n":0.707},"1":{"v":"\n## CSR (Client-Side Rendering) / SPA (Single Page Application)\n\nMost common way of using frameworks such as React, vue, ember etc.\n\nClient-side rendering means that a website’s JavaScript is rendered in your browser, rather than on the website’s server.\n\n- The server renders a blank page with a script tag pointing to the apps bundle\n- blank page is sent to the clients browser which makes the relevant api calls and renders the contents of the page\n\nstrengths:\n\n- renders fast on the server\n\nweaknesses:\n\n- no initial render - customer/client has to render so if the app is big it could be a problem\n\n- empty body - no content to crawl for a search engine - ** SEO is the biggest weak point **\n\n## SSR (Server Side Rendering)\n\nWhen the user makes a requst to the webpage, the server prepares the html page and then sends it back.\n\n## SSG (Static-Site Generating)\n\nPage is also generated on the server however it is rendered at **build time.**\n\n## When to use what?\n\n- Is your content dynamic or relatively static?\n\n- is SEO important?\n\nFor a documentation page or a website that doesn't need to fetch dynamic data, but SEO is important, you could use SSG\n\nFor a blog, SEO is important and the content is dynamic. In this case, SSR would be a good candidate.\n\nFor a CRM (Customer Relationship Manager), SEO is not a concern and the content is dynamic therefore an SPA/CSR would be a good choice.\n\nYou could also use a mix of the above depending on specific pages or domains.\n","n":0.064}}},{"i":6,"$":{"0":{"v":"Agile","n":1},"1":{"v":"\nThe ability to respond to **change**.\n\nAgile software development is iterative, focusing on small increments and evolving requirements.\n\nAgile development refers to any development process that is aligned with the concepts of the Agile [[agile.manifesto]]\n","n":0.174}}},{"i":7,"$":{"0":{"v":"Manifesto","n":1},"1":{"v":"\nTODO\n","n":1}}}]}
