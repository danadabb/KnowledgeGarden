{"pageProps":{"note":{"id":"aig5i0xuh2jq0ibzfq8sz22","title":"Reactive Programming","desc":"","updated":1673861535837,"created":1672719811772,"custom":{},"fname":"reactive-programming","type":"note","vault":{"fsPath":"vault"},"contentHash":"d7de602865fb985fd469b04e543e7b16","links":[],"anchors":{"references":{"type":"header","text":"References:","value":"references","line":23,"column":0,"depth":4}},"children":["7izbnov3vo8esfmctmtyjyi"],"parent":"wn8PE1RhG0znK1alrGFYv","data":{}},"body":"<h1 id=\"reactive-programming\">Reactive Programming<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#reactive-programming\"></a></h1>\n<p><strong>Reactive Programming</strong> is a design paradigm that is programming with asynchronous data streams. These data/event streams are observable and can be used to trigger \"side-effects\". A simple example of this is a click event. In an application we can fire effects upon the trigger of a user click by observing that event.</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Design_Patterns\">The Gang of Four</a> famously defined two patterns that became fundamental to the focus of reactive programming:</p>\n<ul>\n<li>Iterator - the consumer pulls data out of the producer (imperative - consumer is in control)</li>\n<li>Observer - a way for a producer to give the consumer one item at a time (declarative - producer is in control)</li>\n</ul>\n<p>The book misses what is the correspondence between these two patterns: The iterator pattern allows you to pull data out and the producer lets the consumer know when there is no more data AND if an error occurred. These two semantics were left out of the observer pattern by the GoF.</p>\n<p>Reactive programming is about unifying the observable type with the iterator type and therefore produces this new type known as the \"observable\". The benefit of this is now we can react in the way we do to static data to dynamic events in real time.</p>\n<p>By adding these two completion semantics of the two patterns, we can now use all the ways we know when it comes to how to transform streams of data that we can pull on the streams that we pull e.g. map, filter, reduce, zip, merge etc.</p>\n<p>The advantage of this is now event data does not need to be stored anywhere when it comes to processing. Meaning we don't need to have big data stores that we pull from in order to process data - we can take the data as it arrives, process it and be on our way. We allocate less memory this way. If you can write a sql query to transform data in a temporary table somewhere, you can now write a sql query over live data. It's all about serving the consumer faster. <sup id=\"fnref-3\"><a href=\"#fn-3\" class=\"footnote-ref\">3</a></sup></p>\n<h4 id=\"references\">References:<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#references\"></a></h4>\n<ol>\n<li><a href=\"https://gist.github.com/staltz/868e7e9bc2a7b8c1f754\">https://gist.github.com/staltz/868e7e9bc2a7b8c1f754</a></li>\n<li><a href=\"https://dev.to/this-is-learning/what-the-hell-is-reactive-programming-anyway-31p5\">https://dev.to/this-is-learning/what-the-hell-is-reactive-programming-anyway-31p5</a></li>\n<li><a href=\"https://www.youtube.com/watch?v=-8Y1-lE6NSA\">Reactive Programming Overview (Jafar Husain from Netflix)</a></li>\n</ol>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/KnowledgeGarden/notes/7izbnov3vo8esfmctmtyjyi\">Reactive Programming In Java (Course Notes)</a></li>\n</ol>","noteIndex":{"id":"wn8PE1RhG0znK1alrGFYv","title":"Knowledge Garden","desc":"","updated":1725627729985,"created":1631901573363,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"8d5496c75d3dbc62da1263726aa08b42","links":[],"anchors":{"my-second-brain":{"type":"header","text":"My Second Brain","value":"my-second-brain","line":8,"column":0,"depth":4}},"children":["bwlvrHRccHBUBhHu7Mh1G","7w0mtdy9yip2z8dm44sazxg","8h567033xcainsquqy92vos","514eyidh124uj7yywy9os9z","zbqz5oql3yy88t9yf8q9mtz","XZTCg1c8mZeR9jEyM2HOy","6FtP5bCaxDDd47jEuSH5y","5c0e9ifp2lh9imgp1zahq33","aig5i0xuh2jq0ibzfq8sz22","8HZ1TTh4HUtNFePL29cg7"],"parent":null,"data":{},"body":"\n#### My Second Brain\n\n---\n\nA collection of my notes around all things software development.\n\n> This website is generated by a Dendron template. For more information, see the [template README file](https://github.com/dendronhq/template.publish.github/).\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"dendronVersion":"0.83.0","enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","assetsPrefix":"/KnowledgeGarden","siteUrl":"https://danadabb.github.io/","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}