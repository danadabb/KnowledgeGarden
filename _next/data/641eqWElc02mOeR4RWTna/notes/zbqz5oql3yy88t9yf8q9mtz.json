{"pageProps":{"note":{"id":"zbqz5oql3yy88t9yf8q9mtz","title":"Nextjs","desc":"","updated":1707554604205,"created":1707529949723,"custom":{},"fname":"nextjs","type":"note","vault":{"fsPath":"vault"},"contentHash":"59aa89238c67218a6d3181afa0f978a5","links":[],"anchors":{"post-140-notes-and-usage":{"type":"header","text":"Post 14.0 notes and usage","value":"post-140-notes-and-usage","line":8,"column":0,"depth":2},"routing":{"type":"header","text":"Routing","value":"routing","line":10,"column":0,"depth":3},"file-conventions":{"type":"header","text":"File conventions","value":"file-conventions","line":47,"column":0,"depth":3},"data-fetching":{"type":"header","text":"Data Fetching","value":"data-fetching","line":58,"column":0,"depth":3},"on-the-server":{"type":"header","text":"On the server","value":"on-the-server","line":60,"column":0,"depth":4},"on-the-client":{"type":"header","text":"On the client","value":"on-the-client","line":88,"column":0,"depth":4},"data-fetching-recommendations":{"type":"header","text":"Data fetching recommendations","value":"data-fetching-recommendations","line":96,"column":0,"depth":3}},"children":[],"parent":"wn8PE1RhG0znK1alrGFYv","data":{}},"body":"<h1 id=\"nextjs\">Nextjs<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#nextjs\"></a></h1>\n<h2 id=\"post-140-notes-and-usage\">Post 14.0 notes and usage<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#post-140-notes-and-usage\"></a></h2>\n<h3 id=\"routing\">Routing<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#routing\"></a></h3>\n<p>In version 13, Next.js introduced <strong>App router</strong>. Prior to this, Next used page router.</p>\n<p>The difference from the outset means that prior to 13, users would place their routes within a <code>pages/</code> directory where each file is considered a route:</p>\n<pre><code>└── pages\n    ├── about.js\n    ├── index.js\n    └── team.js\n\n</code></pre>\n<p>With 13 onward, app router looks for a <code>pages.(js|ts|tsx)</code> file who's route is determined by it's parent folders. Eg:</p>\n<pre><code>\n└── app\n    ├── about\n    │   └── page.js\n    ├── globals.css\n    ├── layout.js\n    ├── login\n    │   └── page.js\n    ├── page.js\n    └── team\n        └── route.js\n\n</code></pre>\n<p>Subfolders (leaves) become nested routes.</p>\n<p>App router is the recommended approach in modern NextJS projects. Page router is still supported.</p>\n<p>App router is built on <strong>React Server Components</strong> (RSC) By default, components inside app are RSC components.</p>\n<h3 id=\"file-conventions\">File conventions<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#file-conventions\"></a></h3>\n<p>Nextjs has various reserved file names that provide common inbuilt routing functionality:</p>\n<ul>\n<li><code>layout.js</code> - a shared segment between pages that preserves states, remains interactive and doesn't re-render. The top most layout is known as the <strong><em>Root layout</em></strong> and it is required component that is shared by all pages in the application. It must contain a html and a body tag.</li>\n<li><code>template.js</code></li>\n<li><code>error.js</code> - handles errors in routes</li>\n<li><code>loading.js</code> - creates a loading view. Beneath the hood it's tied in with Suspense in the layout file.</li>\n<li><code>not-found.js</code> - view for an unknown route</li>\n<li><code>page.js</code> or nested <code>layout.js</code></li>\n</ul>\n<h3 id=\"data-fetching\">Data Fetching<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#data-fetching\"></a></h3>\n<h4 id=\"on-the-server\">On the server<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#on-the-server\"></a></h4>\n<p>By default, Next.js automatically caches the return values of <code>fetch</code> in a built-in <strong>Data Cache</strong> on the server.</p>\n<p>If data is dynamic or requires re-validation, cached data needs to be purged. There are two ways to re-validate:</p>\n<ul>\n<li>Time based - revalidate once a certain amount of time has passed. This is useful for data that doesn't change frequently and freshness is not critical. This is good for a mostly static website.</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://...\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">next</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">revalidate</span><span class=\"token operator\">:</span> <span class=\"token number\">3600</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>On-demand revalidation - manually revalidate data based on an event. This is on par with traditional server side rendering to ensure that data is always fresh on every request.</li>\n</ul>\n<p>If you want a request to opt-out of caching, you need to set a <code>no-store</code> option in the fetch call:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Opt out of caching for an individual `fetch` request</span>\n<span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://...</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> <span class=\"token literal-property property\">cache</span><span class=\"token operator\">:</span> <span class=\"token string\">\"no-store\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Alternatively, you can use the route segment config option to opt out of caching for a specific route segment:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Opt out of caching for all data requests in the route segment</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword\">const</span> dynamic <span class=\"token operator\">=</span> <span class=\"token string\">\"force-dynamic\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4 id=\"on-the-client\">On the client<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#on-the-client\"></a></h4>\n<p>Fetching data on the client can be done via a Route Handler or a third party library such as Vercel's <a href=\"https://swr.vercel.app/\">SWR</a> or <a href=\"https://tanstack.com/query/latest\">TanStack Query</a>.</p>\n<p>Route Handlers execute on the server and therefore protect sensitive information.</p>\n<p>Route handlers replace the API routes from 13.0 onward (although API routes can still be used).</p>\n<h3 id=\"data-fetching-recommendations\">Data fetching recommendations<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#data-fetching-recommendations\"></a></h3>\n<p>Next.js recommends that whenever possible, to fetch data on the server with server components. This is done via server actions.</p>\n<p>Server actions are react functions that are asynchronous and are executed on the server. They can be denoted via the \"use server\" directive, can be inline or within a separate file.</p>\n<pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Server Component</span>\n<span class=\"token keyword module\">export</span> <span class=\"token keyword module\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\"><span class=\"token maybe-class-name\">Page</span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Server Action</span>\n  <span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">'use server'</span>\n\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword control-flow\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token comment\">// ...</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>","noteIndex":{"id":"wn8PE1RhG0znK1alrGFYv","title":"Knowledge Garden","desc":"","updated":1725627729985,"created":1631901573363,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"8d5496c75d3dbc62da1263726aa08b42","links":[],"anchors":{"my-second-brain":{"type":"header","text":"My Second Brain","value":"my-second-brain","line":8,"column":0,"depth":4}},"children":["bwlvrHRccHBUBhHu7Mh1G","7w0mtdy9yip2z8dm44sazxg","8h567033xcainsquqy92vos","514eyidh124uj7yywy9os9z","zbqz5oql3yy88t9yf8q9mtz","XZTCg1c8mZeR9jEyM2HOy","6FtP5bCaxDDd47jEuSH5y","5c0e9ifp2lh9imgp1zahq33","aig5i0xuh2jq0ibzfq8sz22","8HZ1TTh4HUtNFePL29cg7"],"parent":null,"data":{},"body":"\n#### My Second Brain\n\n---\n\nA collection of my notes around all things software development.\n\n> This website is generated by a Dendron template. For more information, see the [template README file](https://github.com/dendronhq/template.publish.github/).\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"dendronVersion":"0.83.0","enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"lookup","assetsPrefix":"/KnowledgeGarden","siteUrl":"https://danadabb.github.io/","duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}